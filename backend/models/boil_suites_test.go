// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Games", testGames)
	t.Run("Permissions", testPermissions)
	t.Run("Translates", testTranslates)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Games", testGamesDelete)
	t.Run("Permissions", testPermissionsDelete)
	t.Run("Translates", testTranslatesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Games", testGamesQueryDeleteAll)
	t.Run("Permissions", testPermissionsQueryDeleteAll)
	t.Run("Translates", testTranslatesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Games", testGamesSliceDeleteAll)
	t.Run("Permissions", testPermissionsSliceDeleteAll)
	t.Run("Translates", testTranslatesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Games", testGamesExists)
	t.Run("Permissions", testPermissionsExists)
	t.Run("Translates", testTranslatesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Games", testGamesFind)
	t.Run("Permissions", testPermissionsFind)
	t.Run("Translates", testTranslatesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Games", testGamesBind)
	t.Run("Permissions", testPermissionsBind)
	t.Run("Translates", testTranslatesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Games", testGamesOne)
	t.Run("Permissions", testPermissionsOne)
	t.Run("Translates", testTranslatesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Games", testGamesAll)
	t.Run("Permissions", testPermissionsAll)
	t.Run("Translates", testTranslatesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Games", testGamesCount)
	t.Run("Permissions", testPermissionsCount)
	t.Run("Translates", testTranslatesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Games", testGamesHooks)
	t.Run("Permissions", testPermissionsHooks)
	t.Run("Translates", testTranslatesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Games", testGamesInsert)
	t.Run("Games", testGamesInsertWhitelist)
	t.Run("Permissions", testPermissionsInsert)
	t.Run("Permissions", testPermissionsInsertWhitelist)
	t.Run("Translates", testTranslatesInsert)
	t.Run("Translates", testTranslatesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Games", testGamesReload)
	t.Run("Permissions", testPermissionsReload)
	t.Run("Translates", testTranslatesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Games", testGamesReloadAll)
	t.Run("Permissions", testPermissionsReloadAll)
	t.Run("Translates", testTranslatesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Games", testGamesSelect)
	t.Run("Permissions", testPermissionsSelect)
	t.Run("Translates", testTranslatesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Games", testGamesUpdate)
	t.Run("Permissions", testPermissionsUpdate)
	t.Run("Translates", testTranslatesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Games", testGamesSliceUpdateAll)
	t.Run("Permissions", testPermissionsSliceUpdateAll)
	t.Run("Translates", testTranslatesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
